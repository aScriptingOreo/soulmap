networks:
  proxy:
    external: true
  #grafana-edge_monitoring:
  #  external: true

services:
  devsm:
    build:
      context: ./client/.
      dockerfile: Dockerfile
    container_name: devsm
    entrypoint: []  # This will override any ENTRYPOINT from the image
    command: bun dev
    volumes:
      - ./client/:/app
      - /app/node_modules
      - /app/dist
    environment:
      - CLIENT_PORT=${CLIENT_PORT}
      - DOMAIN=${DOMAIN}
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
      - VITE_API_HOST=${VITE_API_HOST}
      - SERVER_PORT=${SERVER_PORT}
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"
    networks:
      - proxy
      - default
    restart: always
    labels:
      # Basic Traefik config - just expose the Vite dev server
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      
      # Single service for the Vite dev server
      - "traefik.http.services.devsm.loadbalancer.server.port=${CLIENT_PORT}"
      
      # Simple HTTP router - no SSL, no redirects - FOR THE MAIN APP
      - "traefik.http.routers.devsm.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.devsm.entrypoints=https"
      - "traefik.http.routers.devsm.tls.certresolver=letsencrypt"
      - "traefik.http.routers.devsm.tls=true"
    depends_on:
      devsm-pg:
        condition: service_healthy
      smapi: 
        condition: service_started

  smapi:
    build:
      context: ./server/.
      dockerfile: Dockerfile
    container_name: smapi
    command: bun run dev
    volumes:
      - ./server:/app
      - /app/node_modules
      - /app/dist
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SERVER_PORT=${SERVER_PORT}
      - DOMAIN=${DOMAIN}
      - PORT=${SERVER_PORT}  # Ensure the PORT env var is set for the server
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    networks:
      - default
    restart: always

  devsm-admin:
    build:
      context: ./admin/.
      dockerfile: Dockerfile
    container_name: devsm-admin
    environment:
      - NODE_ENV=development
      - VITE_ADMIN_API_TOKEN=${ADMIN_API_TOKEN:-dev-token}
      - API_URL=http://${VITE_API_HOST}:${SERVER_PORT:-3000}
      - VITE_DISCORD_CLIENT_ID=${discord_bot_id}
      - VITE_SERVER_ID=1309555440102674513
      - VITE_ADMIN_ROLE_ID=1309700533749289012
      - VITE_MANAGER_ROLE_ID=1363588579506262056
      - DOMAIN=${DOMAIN}  # Pass the DOMAIN variable from .env
      - VITE_DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL} # Add this line
      - DISCORD_LOGIN=FALSE
    volumes:
      - ./admin:/app
      - /app/node_modules
    networks:
      - proxy
      - default
    restart: always
    ports:
      - "5170:5173"  # Vite dev server port
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
    
      # Service definition for admin panel (Vite dev server)
      - "traefik.http.services.devsm-admin.loadbalancer.server.port=5173"
    
      # Router for the admin panel at /admin path
      - "traefik.http.routers.devsm-admin.rule=Host(`${DOMAIN}`) && PathPrefix(`/admin`)"
      - "traefik.http.routers.devsm-admin.entrypoints=https"
      - "traefik.http.routers.devsm-admin.tls.certresolver=letsencrypt"
      - "traefik.http.routers.devsm-admin.tls=true"

  devsm-pg:
    image: postgres:latest
    container_name: devsm-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./database:/var/lib/postgresql/data
    ports:
      - 5435:5432
    networks:
      - default
    #  - grafana-edge_monitoring
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  avakotwiki:
    image: lscr.io/linuxserver/wikijs:latest
    container_name: avakotWiki
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - DB_TYPE=sqlite #optional
      - DB_HOST= #optional
      - DB_PORT= #optional
      - DB_NAME= #optional
      - DB_USER= #optional
      - DB_PASS= #optional
    volumes:
      - ./wikijs/assets:/app/assets
      - ./wikijs/config.yml:/app/config.yml:rw
      - ./wikijs/db.sqlite:/config/db.sqlite:rw
      - ./wikijs/repo:/wiki-data
      - ./wikijs/data:/data
    ports:
      - 3020:3000
    restart: unless-stopped
    networks:
      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.avakotwiki.rule=Host(`wiki.avakot.org`)"
      - "traefik.http.routers.avakotwiki.entrypoints=https"
      - "traefik.http.routers.avakotwiki.tls=true"
      - "traefik.http.routers.avakotwiki.tls.certresolver=letsencrypt"
      - "traefik.http.services.avakotwiki.loadbalancer.server.port=3000"
      - "traefik.http.routers.avakotwiki-secure.service=avakotwiki"

  linkus:
    build:
      context: ./wikijs/Linkus/.
      dockerfile: Dockerfile
    container_name: linkus
    volumes:
      - ./wikijs/repo/:/app/repo:ro
    environment:
      - BASE_PATH=https://wiki.avakot.org/
      - TARGET_DIR=/app/repo
      - PORT=3022
      - HOST_NAME=wiki.avakot.org/linkus
    ports:
      - 3022:3022  # Keep this for debugging
    networks:
      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      # Change the router rule to use the wiki domain with a path prefix
      - "traefik.http.routers.linkus.rule=Host(`wiki.avakot.org`) && PathPrefix(`/linkus`)"
      - "traefik.http.routers.linkus.entrypoints=https"
      - "traefik.http.routers.linkus.tls=true"
      - "traefik.http.routers.linkus.tls.certresolver=letsencrypt"
      - "traefik.http.services.linkus.loadbalancer.server.port=3022"
      # Add a middleware to strip the path prefix before forwarding to the app
      - "traefik.http.middlewares.linkus-stripprefix.stripprefix.prefixes=/linkus"
      - "traefik.http.routers.linkus.middlewares=linkus-stripprefix@docker"
    restart: always


