networks:
  proxy:
    external: true
  grafana-edge_monitoring:
    external: true

services:
  soulmap:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: soulmap
    command: bun dev
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - CLIENT_PORT=${CLIENT_PORT}
      - SERVER_PORT=${SERVER_PORT}
      - DOMAIN=${DOMAIN}
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"
      - "${SERVER_PORT}:${SERVER_PORT}"
    networks:
      - proxy
      - default
    restart: always
    labels:
      # Basic Traefik config - just expose the Vite dev server
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      
      # Single service for the Vite dev server
      - "traefik.http.services.soulmap.loadbalancer.server.port=${CLIENT_PORT}"
      
      # Simple HTTP router - no SSL, no redirects - FOR THE MAIN APP
      - "traefik.http.routers.soulmap.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.soulmap.entrypoints=http"
      - "traefik.http.routers.soulmap.service=soulmap" # Explicitly link router to service
    depends_on:
      sm-pg:
        condition: service_healthy

  soulmap-admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: soulmap-admin
    environment:
      - NODE_ENV=development
      - VITE_ADMIN_API_TOKEN=${ADMIN_API_TOKEN:-dev-token}
      - API_URL=http://soulmap:${SERVER_PORT:-3000}
      - VITE_DISCORD_CLIENT_ID=${discord_bot_id}
      - VITE_SERVER_ID=1309555440102674513
      - VITE_ADMIN_ROLE_ID=1309700533749289012
      - VITE_MANAGER_ROLE_ID=1363588579506262056
      - DOMAIN=${DOMAIN}  # Pass the DOMAIN variable from .env
      - VITE_DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL} # Add this line
    volumes:
      - ./admin:/app
      - /app/node_modules
    networks:
      - proxy
      - default
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"

      # Service definition for admin panel (Vite dev server)
      - "traefik.http.services.soulmap-admin.loadbalancer.server.port=5173"

      # Router for the admin panel at /admin path
      - "traefik.http.routers.soulmap-admin.rule=Host(`${DOMAIN}`) && PathPrefix(`/admin`)"
      - "traefik.http.routers.soulmap-admin.entrypoints=http"
      - "traefik.http.routers.soulmap-admin.service=soulmap-admin"
      
      # Remove the strip prefix middleware - Let Vite handle the base path
      # - "traefik.http.middlewares.admin-strip.stripprefix.prefixes=/admin"
      # - "traefik.http.middlewares.admin-strip.stripprefix.forceSlash=false"
      # - "traefik.http.routers.soulmap-admin.middlewares=admin-strip"
  
  soulmapbot:
    build:
      context: ./discord_bot/
      dockerfile: Dockerfile
    command: npm run dev
    container_name: soulmapbot
    environment:
      - DISCORD_TOKEN=${discord_bot_token}
      - CHANNEL_ID=${discord_channel_id}
      - ADMIN_ROLE_ID=${discord_admin_role_id}
      - LEADERBOARD_CHANNEL_ID=${discord_leaderboard_channel_id}
      - DATABASE_URL=${DATABASE_URL}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    volumes:
      - ./discord_bot/handlers:/app/handlers
      - ./discord_bot/modules:/app/modules
      - ./discord_bot/classes:/app/classes

      - ./discord_bot/index.js:/app/index.js
      - ./discord_bot/database.js:/app/database.js
      - ./discord_bot/schema.prisma:/app/schema.prisma
      - ./discord_bot/package.json:/app/package.json
      - ./src/mapversion.yml:/app/src/mapversion.yml
    restart: always
    networks:
      - default
    depends_on:
      sm-pg:
        condition: service_healthy

  sm-pg:
    image: postgres:latest
    container_name: soulmap-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./database:/var/lib/postgresql/data
    ports:
      - "5432:5432"  # PostgreSQL port
    networks:
      - default
      - grafana-edge_monitoring
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
